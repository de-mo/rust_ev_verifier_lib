use super::{hashing::HashableMessage, num_bigint::Operations};
use crate::data_structures::common_types::{EncryptionGroup, Proof};
use num_bigint::BigUint;
use std::iter::zip;

/// Compute Phi Schnorr according to specifications
pub fn compute_phi_schnorr(eg: &EncryptionGroup, x: &BigUint) -> BigUint {
    let y = eg.g.mod_exponentiate(x, &eg.p);
    y
}

/// Verify Schnorr Proof according to specifications
pub fn verify_schnorr(
    eg: &EncryptionGroup,
    schnorr: &Proof,
    y: &BigUint,
    i_aux: &Vec<String>,
) -> bool {
    let x = compute_phi_schnorr(eg, &schnorr.z);
    let f = HashableMessage::from(eg);
    // e in Z_q => modulo q
    // x, y in G_q => modulo p
    let c_prime = x.mod_multiply(
        &y.mod_exponentiate(&schnorr.e.mod_negate(&eg.q), &eg.p),
        &eg.p,
    );
    let mut l: Vec<HashableMessage> = vec![];
    l.push(HashableMessage::from("SchnorrProof"));
    if !i_aux.is_empty() {
        l.push(HashableMessage::from(i_aux));
    }
    let h_aux = HashableMessage::Composite(l);
    let mut l_final: Vec<HashableMessage> = vec![];
    l_final.push(f);
    l_final.push(HashableMessage::from(y));
    l_final.push(HashableMessage::from(&c_prime));
    l_final.push(h_aux);
    let e_prime = HashableMessage::from(&l_final)
        .recursive_hash()
        .into_biguint();
    e_prime == schnorr.e
}

/// Compute phi exponation according to specifications
pub fn compute_phi_exponentiation(
    eg: &EncryptionGroup,
    x: &BigUint,
    gs: &Vec<BigUint>,
) -> Vec<BigUint> {
    let ys = gs.iter().map(|g| g.mod_exponentiate(x, &eg.p)).collect();
    ys
}

/// Verify Exponation proof according to specifications
pub fn verify_exponentiation(
    eg: &EncryptionGroup,
    gs: &Vec<BigUint>,
    ys: &Vec<BigUint>,
    proof: &Proof,
    i_aux: &Vec<String>,
) -> bool {
    let xs = compute_phi_exponentiation(eg, &proof.z, gs);
    let f_list = vec![
        HashableMessage::from(&eg.p),
        HashableMessage::from(&eg.q),
        HashableMessage::from(gs),
    ];
    let f = HashableMessage::from(f_list);
    let c_prime_s: Vec<BigUint> = zip(&xs, ys)
        .map(|(x, y)| {
            x.mod_multiply(
                &y.mod_exponentiate(&proof.e.mod_negate(&eg.q), &eg.p),
                &eg.p,
            )
        })
        .collect();
    let mut l: Vec<HashableMessage> = vec![];
    l.push(HashableMessage::from("ExponentiationProof"));
    if !i_aux.is_empty() {
        l.push(HashableMessage::from(i_aux));
    }
    let h_aux = HashableMessage::from(&l);
    let mut l_final: Vec<HashableMessage> = vec![];
    l_final.push(f);
    l_final.push(HashableMessage::from(ys));
    l_final.push(HashableMessage::from(&c_prime_s));
    l_final.push(h_aux);
    let e_prime = HashableMessage::from(&l_final)
        .recursive_hash()
        .into_biguint();
    e_prime == proof.e
}

#[cfg(test)]
mod test {

    use super::super::num_bigint::Hexa;
    use super::*;

    #[test]
    fn test_verify_schnorr_2048() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };
        let schnorr = Proof{
            e : BigUint::from_hexa_string(
                &"0x29D551590009AC768A674AC0C42416FDDCF261DE93CA78ED53632929169406E1".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0x4BC63F12E01FBE31246E7EF85292D8ABAAF850C9531E78B5EF7DE7692259E2DF5F0AC93A8BC7F262FA8ACCC5352C6B81976FB8A470FCB80696EFB46DF4EF9E86326AC801B692E4BCD0DAA452A2D749EEE277358EBA0C141187088DCF1CEF6DDAB8FEE47299671BF7AB411AF8E792787471B74DF3866187808685E2FF169AAC4AE55B6CA7152EB29BD82317F1BD26680C6BC15DA734E1E19153253A8D2AFA0C11B08B20A2D334EDE3D29460DA359306B4B7DD4DB65B3CE4F18FDEC6FBE5328C319C5847F8DC7B9FB97E997416CA58DCF286A3D8992B2453F4924152C34687579E1D3E8AACA94F24D24C2810C70AF14BD78BDF6F528BC8167364329685F7F5D60A".to_string()).unwrap()
        };
        let y = BigUint::from_hexa_string(&"0x6AC7B188F3C0AB80238FEA40C71A3BA9C8E438F549CC113C1FA23B0893C0C63157C2E4E147CD69BAEBF2EB464F64131F99D7E23D939972D7E6E60FEF27068E34B84CF011129AF98B0F82C78859F890F6312652BD162477A23ACC3516B2945F52E3FE0168000B3F62B04823418F1B1D3D3BE030586B39174EB1BACB832FC8E86A151DFDC11106B484530B1F9F6E4E072EDFDED5E4C564D75978B05CB797256C225901F31DD2DE56709509BDAE1DFBECA410AEFC94D87A7D585012E70EA977A812744CFF03E50A7FD5B74B7BC232D2318A384E19C0BBAA5D1100DFFD903B9FDE5D86DCDF6541444AA8983F297F9C94E50D2273B020881A600CA5B0FBCB9A17ACD3".to_string()).unwrap();
        let add_info: Vec<String> = vec!["test-0".to_string()];
        assert!(verify_schnorr(&eg, &schnorr, &y, &add_info))
    }

    #[test]
    fn test_verify_schnorr_3072() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };
        let schnorr = Proof{
            e : BigUint::from_hexa_string(
                &"0xFE6B909E2C4EC3C9A25315EAF1E99A50452BBD22E75A69C247147E23669D665F".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0xto_string()).unwrap()
        };
        let y = BigUint::from_hexa_string(&"0xto_string()).unwrap();
        let add_info: Vec<String> = vec!["test-0".to_string(), "test-1".to_string()];
        assert!(verify_schnorr(&eg, &schnorr, &y, &add_info))
    }

    #[test]
    fn test_verify_exp_2048() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };
        let bases = [
            "0x232A507A782E7C163104C47C4853D20E2DAA6AED9540AAAB74BFFA49BEDCFF27D09B88BAECABBFF153DC0DEE68910F0971DB2F302B8029CC5AEBF3013EBB744D774BAFCA46F6063D800E6F2B392AECAE68FC1D1A2FB6FF5459DD929F4BB030B48E7A25A9D2199410C2ECE7E9E46DA2296C8782CF3829ACF11341F02F147D4D2AE6381FA846AD2DEF3573ED58D5CD35F7748922B76D69D80DF6074EC42A371D8E649C6AEB4029A2F945A323A50B7A6ECFE491174A7A06092A0B46D2FE6357668CFF513426527B12D61089F599B1597B7ED579CB896C4E4AC2B010465479D3EECC080D1E7DAA60C0E63D6A4AB56EAEA191F98F8F37249EC32A15BD7D152E6EB2B2",
        ];
        let gs: Vec<BigUint> = bases
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let statement = [
            "0xB0522B77969F7B4ED207E4D57BE52439646F7E91FAED24E7953C672572F5153E339FCEB4AA8524628A56F61ACCD7C868E2187AC5542580D376DBA322957601592F430921529B2E017B0425394D128CE8BA9A396E70E522C03242D610FCDE298F37B70E7D37A2BD6BE5F929CAD1EF51C91DA932E3DAE0565474123DF99621C33458B73D1991862CE8657D24EA60FE3B272469202767FFE2F65FF7B7935B9C0B01D3901233F30CD35707517040799625F2152BFC0572A95340B5B41D3959EA9ECA0424AB385BBE7D1B7E720F57669D109704D11EC4A1849EF81A73BEE8A9A5CC085B7CDD1988CD039E69FD4F20D10FFF2DF2BD135F2C068DAC0E086B5B1B2073AC",
        ];
        let ys: Vec<BigUint> = statement
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let proof = Proof{
            e : BigUint::from_hexa_string(
                &"0x9963C404F260027B5B9C6A7B79F7B3E7A30BFB369EF1E5339A217C88355A9010".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0xto_string()).unwrap()
        };
        let add_info: Vec<String> = vec!["test-0".to_string()];
        assert!(verify_exponentiation(&eg, &gs, &ys, &proof, &add_info))
    }

    #[test]
    fn test_verify_exp_2048_2() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };

        let bases = [
            "0x3306B86AED23B93917A2F16CB76FA5AD9A2823BC7CB1EDEC3A783AF0BF42CF20E66A59309432C1038B3A583B12EBA5F3102C3737C236E24DBCADA136AB0536A87EEC6AD3EE80A268FEF2F373F4639269C8E7433B8E7BAF78E00E528C9F7D63837CC5B21FB68DF1A4D0E16F8DEC4DA0B4DD0449ECE6FD6CF46137100AB000F654D58C0F22F5D50AFECBDFBB8E120F030EDE94861648294FA439A2F88E0E7DCF8C139B3A113CC92F65E9E40F4614C695D7E7177DEA619CFF583E7C89E17B6B5E25C3431C87C1B835411A7C7104CCD99794F149D267011BC0427F70B7375C36CA3E6B48B09D4ABE95C8802120ABD41FE143A73937309073355FFB53A0289CA33A7E",
            "0x
        ];
        let gs: Vec<BigUint> = bases
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let statement = [
            "0x2DC36C27B491961FE3F7DC0CB709B2BE712C0C12A6D432DC33EDCCF81958D50E261C2771BBF5CA4FBC908205508310DB127C14850F5B38A3156AB521B57E85D0E8C81969D07E8C0D69B5AF8352B5CE74DAA8FD3870B04F6D8068CA8333D777EC256BE114BC2718E5117BECE35ECC6390A5DB4EFDD5AB4736C37C7BD1FF10C8A07E8F562FC76087EE3C8502941A167B89EEC86434F095A17FD0C3A7D467CA56480097E69B9D610C044CD11CCD23BF1DBCC537A105C718112ED72ABB599039C28C16440A40900173F6EAA21311EF4CC0AE53A82384BF96C096154F7343446B9EF52B8648749688903B00A8073C1CF0E766CE1AAB7253ED78A210C24C6FFC06B6B5",
            "0x3B9BAC0399C6B7DAC8878D0DC7889332CFD3914F4C886F916A5FE419C219203D30CBBF19E9AC0874D6B190B2DD6236360875F61E3E14BF64AA7E22EEFD03DDC1120A7758034352E6ACF4830B54B0979D6EA8BE38691951F84AD27BA131AEE6C509B64FB47F04FB52A394FC16CD06B6FD72D225B73B180D49FE6C351D5868EA3514D45FFBFB39A7BD641F1635EE0D99F195A702E52101A4DCDE59071E677D55DD93AF4630FF0C51A26407A3E0A682E2D2FF6EBB72F24BC88F2094919DAFACB32EBD6B39419A60EF742577154E8ACBAFBD80DB82A7C8EF39D873E9F468067BEC3C097BDB50EEEF5863270AFE91AE8A4CFF1A2F73FCCAFF3A7C4E39A0E4BFD60DEC",
        ];
        let ys: Vec<BigUint> = statement
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let proof = Proof{
            e : BigUint::from_hexa_string(
                &"0x394374B59A3ECAD645C9B23A9614923F97116F069B6101B7CEEAFD774CC5E172".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0x17AE08D1946F8AF0F1CA3C8795967AD0F7F72EB57F970C1C29B5435A3195105971C12BDFE9CF9A07861606BBBB1C8CAA39710B70AE91D3B1D1AD8C1DE9F0D7EE7FFBAE5C5962E1557A9520C1525A69F13D246FA7A6DD32219E646D57DF1A450B712D7F211122056CE4967EE7904F5084BBF1F8A465AB555209B78012397525CE082D3134EE30986578CC4EEB084781C2B1B7D5FED47E6D4B574BC50A75CEC84603D21B46B3BAC73E8C35D09A50D19D6C524B0A716A72D1BBED444FB0F03E1D31A04B45B0BDAF95AC204CF9C462CC779723EE5A971ACAF60CFBFCBF6BEFA5E820063906FE539771C21DB8078C975AB976A07B81DAFD2D987AC30809CB46A733B8".to_string()).unwrap()
        };
        let add_info: Vec<String> = vec!["test-0".to_string()];
        assert!(verify_exponentiation(&eg, &gs, &ys, &proof, &add_info))
    }

    #[test]
    fn test_verify_exp_2048_7() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };
        let bases = [
            "0x790105093754B086EC489A6F0030EFE065BE8A7EABEE155359E6936ED69B08BC5DADD72A4594124F9842682553BD7B2A5ED0339DB4DD7BDD946BC730569A21160B97F8DB514CBAFD881E2EB5B8E1958D27DC5A1172EB27DBB6BD9396F881B4945F1AC5760F82DCB32D90D23604B6FA52B7AFC441EAEF805844B492CB036F47D6AB7182314B474B217416B66F85B58C70741CC131EEF9ADDD9C4C526AE38EA2B3BF82C3341DE1570DD51D5D352FE7E20D38D75C4E263BDC8B1719301AAFC2AD59370E1F422BC2A4B97B8E0F8A87F65F2AAB8FCAE3C95A731415DDE11171A414BECCDC4272281C4B7D1F4A30EC8B7896B9EF2EBAD1D5C75969D7E2662BC5596B9F",
            "0x427DA67AE8478991CA66655FDFBB5DFEF51D4F6DEF238F9A03B2CF8C091B3724A1446378AF44418185C5D460F202A333D59905A3072EBAE0FC24FADE9EB41AE3E6E8026F08F519966BBCFD53872088766DA9E6FCD3A770A7490A19005626C11FBC2996143FA01B326EE44399D64793C576F8FF74F2736F0B38113B480D6737336310AD31EF26168DEE0A635D0DA68261F673222E0BAA00BD91526089922821F6E3F0E90287A0BE91D86130CC5A60CABB830B8BAF202D0E9CBB80A68AD36A81D5C03ECE56DA7A28958A2FE5B345D7249F123F0DF88B09319ED54EDBD0A2192E9B6242700D5471572F1058D376B9E72F7E79AD979F5CD94F3B030A92B8F1A8C32B",
            "0x
            "0x4A1729BD5159278B8C2C3025224D1BDF35E78474C1A22BC938200774821ABB36B766F71AEF79CD17B5B364B817283700397D57701E756CBCFBE8494F26520B6D14F9B4A69776F6773E42494CC4B913E379E40307D8BB89D61D892401E7E6B173FFD8B1C39A9E282968D1983B8AC9EBA1490301F9C2E904813C3F4800CB1E588872B678984FFD5C2C38F53A02914304B1F1E0DF865ED85CB1FF43399555F95AB2FB8515393C86E42042C46BCCB678CF1D64BA06282FCBBC1270F2D7E42AA41AC3B90D0B9100DF1DC3C86FFE2D5E1BD53EE026C93C2534576553E84F15F9B0488F1CF98876BAA8C868E392AF7DFBB4F8B0A383A2EE2BA512EF18E6DA972C014656",
            "0x584BDDF29EA39E28DCDF17349424885280064BA48B5FEB72A5ADEAEC8B356419DF7F090AF3770E1F52A035943B99123A160473EBCB45BA2212DA8C6FD0F040208A30C3A4AAE101764E161126300A6221D34FC288B59758A9E399A5595F894A848A16232AF0BC09D4F22B0761F58E9083E122D7A680E984DA919E15CFB167C14B5CAE79C67D44FBC8D70D09C3660186860E69FEA6ADA9BCABF83DBD9514F7C67BE1A99C76D9A2F196BE5DF597FC964E013B60D8C2A2FFEB020CE81457C2C7D25866F6E2B7029D003B667232BE61A8032DE7838E4D5A3CD440C0E7C800C37DE7E954A2319E6C4FFCC5720AA1DA328E0D41939233A8105691DA302F78A709F37A92",
            "0xB615F959300F42315A10B48613CE514DF19E951A6B8C4BC07A940C94BC0D828014975A55F600E3E0DA58814403E4DF856308CEEBA8B657215C7FBA4A0B9AB7C354FDC03E26DCF1C4D271C6E00384DFEE346A636A7DB13D06198D997401DD5FF85519FFAF7D35886B046FCFF285C120BFD294F0B8DB54C09D776996DC77466E14B21EA360581025E85854AF962142BFAA428ACD0B2A5EAE8D0DDA39F7C373CE5D5531D072BAAE429A027654F0E94307FF62BE700C574B2E1C8349C8E43676B57E668A5AAFD78596EB6A519A54D8AF3DF756CBBB074667359ABD313067182C3BFA53A0816B91A46BF1F701DE041918BCC6C61B97267AC51570E6BB0BFCC80CAC51",
            "0x535550E46B9CF526CF240027BA1CBF8CDF1CB71B0A7CBE708156C18EC7005D238D30F06C2CC2C14433E94D49D526850B0C5C34EFA2062FACE29BEBD61F7BBF80F9F01BA5803687AF89AE7FBFF33C385A33455E3CCFE4FED11D6ECDBEA02115C1ACF7304AB2A8A28B6949FACF10EA3A4411111785204E781FFA6C9218FB96F2AE73BCC313D356057A11369D6C124142A7147A19B41CD7FCFDBA94E714280FB5223565DE31AC5FD9268FB357E4096703CBB3150A6CB4E311B16EBDC5E2E43A0ED95EC1296BC5401784B09590B18FED1A5FABD0790207DF33C01DDE47D53BC83BA4A97AB9CEFEE6E3C305758F61F576DDAF3DBB679D328346BE52FF204E485BD548"
        ];
        let gs: Vec<BigUint> = bases
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let statement = [
            "0xAFCA4BF7A2FB06748C3ADC1166F543439297038922FC4695A4AD2653D49650F4C3E7853FF4B3E8454A95DF944717F8738BF9749A0D656400FCE9FF0BF788BC217BE62D8645FFABEC159065A5FCC29C85C979C113E09447EE383AEDB0F394609277D4D5EA41377BA3F0E409C2C9C0AFB42F052E0DD832B8B30742F74FD62A16EBEED4162BB786F7E040F77CCA2361C616A4F8F5CC950AA80B39469E38FDB327F79248D7DE23D0AAE3E2718647EE2D9570EB0D76EEE25FF2213E4C93AC44B3D4486BA6ECC6FD30ECA93ABE5F38E3BFD63CBB9A72611CD4ED71D1E9EB948E2A461C367F1900147233545BF00675964BECAE4548629FC297242D4DFFF53764E9B5E2",
            "0xA18F1273DCC60C47BB996F3ACC1B47B064AB3B5E0A758844836AE98234FB645C7F2B2189FFF03C9602CF363FF40983EB6FA53DC5BCC48B72901E2C7BD76A4F74092CB34A12F2D9C03206A3C239CE7F8468F98639BE3E05DB9B802BCD7B06008BC4ADC9DD5E9DAF3B07D2C0DF8DA98A5C4D85C4A00FB3A2A8668D9ACB370E2184762ACC0B8A717141D2D58D6EE19766513C88F3762FD181DC067B86E66817ACCD03EBD8B1F4CB7B3EEBAEE98AE804A3C0805755CDF1A046114A836A29984E7D8B8F5611DB6DA059CED8128FE5A343C2CBE7186DE115C87760F6622A215BC24882F0A40CFC1B40304081887929654C300CEB62AAB231F7908B8D259D2249C76456",
            "0x7028FF25BD2082090E4F72727274904666D2743E6D8ED4BBD92443955248623178C718C14829A0609290D02C704B48BC696FEF173A2C3EAF9B58A4226B2F4B4EA04FD245F1B635713BFAE2B4384667577647CD1EB4FF81327AE3870D5C67CC159AFEBCB321F419C6C4BCFE171382AA74498B994B242263B435EF008E89342203CF36DC2B4DDEC7369DF994E30F921E27BB501E4885FA07E44E4265340CEC7434A07E570254FBCDE0A6EC7657812E3BCFB10005CC467C0B39AFC75773F76B3ADC8890F5E9C515DD96EE84FA68D4271E672B3F503C012A263A33A03ABC0A26F497D305158CC9CB7AADEE9109B4C4F85A21F923044C2A9E241262515103D93124C3",
            "0xB19E7B632603F2005002D1036E11A035CF0A1106269E1414FDC3095ECC77E30A523B2BF4F12D9202DD6FB800C2797F74E654A7A824DF8E53A833AB15D12597C73DFE59BFC75A2EB4E8807A41A33CAF94DC501D505FA9A64E55F4123DAFE969047DBFD6FA9C01EAAD9FF78D4BCB3CF0C19BE212CA74ACD3CF6B44E73DFF14422C8682B9B04FE9B62254969EBE45037F856C89CCC2266E16654E8BACD6E6F61CD98450A808C3D9533D8283A41C690F0B9D4F2839682DD850A45A1D3A84E1F0D9F91773DC1EB9C186D992422908EA0D3E7AD70804DE13DDF8CDA80427C5E5BB86DA63F1BD8BB4277A74B4C1C0F6ABE15C3B386C77971B87A393BCC7236FEFC0E65A",
            "0x79B8EDEADD1EFD1C571D1FF5A90FE53555AF9AC581AF63404862815C9C07DBFCF76952209B6287BF3DB524021AAA448C00402B51BEE74F5F87ABFE90C0D0D3AE5C8252B8DFEA96F5A7297BDF2BAF5326D1F5E465BB3D4D916F4578BC9AF56E94D9E8BEFFEA7532161442360D80FF5C7FEA7E70B7117504CB3EE902366B502B6E32DBA9FCC34D453768A6C92D8E923A47F90307EA739A16E525A06973D2FB9FC83EB1E668258B88AE5AC74FF4F4F0D1C4FF1D5E76793CCC967774C13EB5FAACB6497B23ADD3796636ED0A83E32DA608059832AC98819660DA656FF7B7D8E867AC9A0F3833FEF65409359C2ECC900FB30106E682D946B80A8A22D9A9365C826AF2",
            "0x96ED0EFF34377FD9515FAF128B1E5B55C09F32A1A7360A2CCB6652CCC9481AB179A1941232531716316236EBE76432ABA634CC3D3206445B4F877C253F6B39660F009E8BF21160B5AC0B150CB274D0838C4298F7ABD99A62B4917B9D9854E76B48399CBB1F87C172CE24796C4A50EC5671197FEF39B3FFBCBD31187F53065DF184BDB6D13EA6B767ADE79410582939E1F11D0817E04BD4A7A9E40289BE4AD7E7C9CF1E8A9C925993503EDE60AE66A26731081AACC7A5C4CB117EF515DE3E8312C077CDC3A3CDA449FBC8F5993575428A202D8AEA8B93240BEA7E115CC00C10405EBE95A2E0F726B8F56ECC46143DF1F1F0E508E1F05BB1DBC30AC6809C28B33",
            "0x11F7972A5A4972865E812C035C30CDB50BCFE0B07BE555D7CA03CF355639F5679F63629DC90C47B58831C86C29F4991210AD4FADF1A55634E1BAA81A0576E62A3566B9C6C2FD5660D5DF23A1AC4AC105EA38597C472AD25A4B28212A0410FE6E33C3465C73B7F5E1D5CD5DB330EB8A879F77CD5F85B534610F9B2294A160172B072B2031FC6E8153768713E1376516B16C8E718E58737DAC9A0A6AB8DA921D093EE59D9D9647B9512D32A0BEEC7934B6C49C1B66B3B63CFB34CC7854EF6A3B9D2CD772EA983393391E576A3C4D497224B7ED4244F0311F84DEAB9B5381D0C34A0C65CA34113D980B0838D4F91106D13C523215610FDB33C4ADF6E8124D6A95C1"
        ];
        let ys: Vec<BigUint> = statement
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let proof = Proof{
            e : BigUint::from_hexa_string(
                &"0xC16A0A29503089F591FAF4C32C9DE200578526A3476AA42A13AC5B6508D75679".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0x118D492BB707D006082168395EC7DB6BAF8CD80818CC985E50885F154AC8EFF35B014BA99F180EC8A800408132B91926F5D7EA062E66074F70B0FBBB90CAE233D546FEA3E7B80F9420F7C396CA62EF639EF99586A3C37264705B9845D804661DA14FB058C87EB68E06AA3C9C9E556ABC43CC1E4F5E209F2DE6157A8925147FC58425EDBBFF27F84751A06456F1F30E5B94D8CE0451AD05680B75B6BA316558FF522421319CE2C639035EFD1E172733104F1821096190611EFE471F9AB4A7F771B88E246B483397070C0B99B4BE38BD737BA5DFB915336ED4B4388F1D32ACF606AC400DD98774A7CC645EAE7E92EE30083869254F2130845189456BBE1D28B18C".to_string()).unwrap()
        };
        let add_info: Vec<String> = vec![];
        assert!(verify_exponentiation(&eg, &gs, &ys, &proof, &add_info))
    }

    #[test]
    fn test_verify_exp_3072() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };
        let bases = [
            "0x
        ];
        let gs: Vec<BigUint> = bases
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let statement = [
            "0x2F388A9C6987D0E4DCC04CEBD8312F637918883CB8777C8DFE5733C2383377CA2278BF22463F68D8F9CE1EB5CF09AC5DFA49B2D267BD7E1F1EC8A4DC6ADBC5FFBB9070FB90BD33E0D51F747C715F26C056CB8CE8A63522DA7D99D2F14217DEEA583D371B677EDCE5F7FF3C0A1F5B80FAD3CA8580D373D47D316D2713C3809E8DD82DD08DC4D808B59B65DF78E137275992A571D1CE23B83B4DB16A3E22CF46C4F20FC63FD2CDAC8990F43C33A07F9C831CA8E9F1A103E5F2F5CB88EA8C3D4B95DD5C57FA8B8CAFDCCC02F5BAE08076B0ED61A033469844CB6055A0F319E643F129B16767F4F8643863E071847F89F42E2F7E9D266DBA1072F614DA82D3F7C3ECFFED63679AEC0682AB563DC648E7513B4D40E3BA5659E6F41DA52EF1A167C927494504A4E27EF792369F9F10DB834AC63470AC610364B077CE93F939B5E8979DFC97001980E5AE28C2A1EFBE9AC063F60C8F90CD54CD17E3B99D817B5135A0912D8850EB5DE3FB6D019833042C815A53141C1FFDCC909B2245C2336497F4C1F6",
        ];
        let ys: Vec<BigUint> = statement
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let proof = Proof{
            e : BigUint::from_hexa_string(
                &"0x5636744690A3B23308800A82E1C482C873B13A760153EF28F7DB42B3ACE49303".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0xto_string()).unwrap()
        };
        let add_info: Vec<String> = vec!["test-0".to_string()];
        assert!(verify_exponentiation(&eg, &gs, &ys, &proof, &add_info))
    }

    #[test]
    fn test_verify_exp_3072_2() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xto_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };

        let bases = [
            "0x19D43DDD760D53E144289FE63826030B25DEA1BBA1CA04A75976CD0E81460D2A31FE17A50763E72FB756DFBCEA4E850FFE3E1AB12E75A1774A723FA745AB2025BB21662F3D967796068A23F3BB550AE2AEFE2B674F58D61427EFB3F75842AB5F46DD7ADC02570800CC958282FCFF597AEF9B9F4E64EC6A937C45A19BD1124BADD3862A1394617E341256F2D056777F07A82D14B42E22B3586A5E05BC16F79CFD751829464B6997C213F030A28CF45809281323915B67D8C695ACC7CC37DE77249BE624C16BA183FCBD8E476F4BAEB1E2467EA45D6D43D94C48E9D69EE27988B781683604D17CFFFEEEEC25D1E52608D55FE82D602468BCBB72CB1952BC9D56C3299E27CA585835204A9C5B5FD1F9A5236490BCFC9B6B536A5568CF0A5D273D4AFC0151C64A4BA464001286FE3AD0EAB70D8C87FBD6BCC47BC6E449ACC2EABDFD339DED9553B808E58BCCB3F024FA75968BFCB5EA020B9AC7055FDCAFAB3B314090C1DD2D88F86383F5768840B71FDCFA6C7FF29EE7256BB86DB4AE7D57D57827",
            "0x424BFD6EA3ADC99AF84B2F6406C90D6C3AC841752B016702E2347990B85E2013634BCA89092763F94A3C54EB1B2E3787CA537D9ADD0602475B1B5BFBF68819BB65908A9C33D821CBCE3FE9919A1DC032DBB38D3533CCE62DF28BC8774A6044EE7F88C685A71C2098D6EFF6AC204436346289761AB91553A809D7DC5DFA7E0B4A24A99F43E66CCE3D9C631F1ED9ED4DA14464B3921DEC061352DAA7093CA34F04CE5EFF06F47385D401AD413CA463382656F73A58AD4F6D55A0EAA8234CA67F258F31C0EEBB63617A3B59EFB1606082006417B50F00232CF74496E3A43D6EF150D7A4947761917BD5AA2DD02AEADE8E5C761B09307EE673111AE44932E5CE1DCB821364577F69CAC4C8FB2B3158449AADAD06933B5D56973FEA112781BD617EA66B308ECF2197C4693E6CF56D5F06ABCDED20F9A70D7E8FB071B57C7009142C17AC0FB24C4EDD4780095FE3E9A7C463105EE15D88D0AF3DB266FCCB2FFE8521A4F0E13A0901CA70824D579C6817F022E1EF520F718AFB999750F46DFCD23EB9E2"
        ];
        let gs: Vec<BigUint> = bases
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let statement = [
            "0x5906F09D47C48B3FEEA97F003175033DC718C6079A6F7E439F3998B6AFDB79873A7C9DB306D401B4A1AA0E128331658C2A50DC2962B337FF50D523CFD9B20C4EEBC7A761C84F6E187A59AC0FE466B831714DA06C5E02EF3132B10BDEC4591BA9D3715AC47EFE5D15686487F48E7D252C20453EA339DAC4C671C128BE687883305A8C6BEF8F8F14B20358C9D46F82A196ABB4FF984B046FFABA4ADA2B18401AE64D6E19A3C99905F3A0999623AADD5DB3B772BFA82640EE0401A47308E61A2C37A8D3435D60143693F01FDFA16977B8F84A061C21E87F091D072A8797AD72DB408281DF3A482DAE9A8441B088F3D6B45937FB861EFD08E9772B33E8AA308FDD07B019F7DF60959640B8BE4FA27BCF0AC52D8E1B522DD78118EF2531EE43F29B5A8889D95100C0C5E8058319F8DEF06E5F7491869CA09842B74F374292780971637D6BF5EA966B4C1C10F15980C58AF82240F76FEDCCA0F285E5E672A6BB0993600C472C4B9FBB2AA6F51EDAF05431693ADDB34B87A1AAC16D47F87FF7C42B3566",
            "0x329E07B476E4F0F97BD3DAE33757A621DD589C990AAA9CB14FA7E498A3280C2C59E3A518FBE75753AF142490897B796E0C594CF1C767A5511C46877946CE8135BDFB5FAFDD0FE998F91F46B966870AE332D47C5B37158EE3525A9C68D3DB01BE2894BD9D1171F77F70B8FA3193A68B78E2FF507F45F228DE696AB6F86C6232E781BF6E905E4A7CAF1E31398499C55622F89468597307702854CA5876A3D93BE29F4F996FDEFED23FFDC904CDB781A1F5E833AF1FBB2349E83D05BC401DADA2CCC58A3768A9B1B413DEA7D0F69BB991F658C7C3E0BDA5F570D5FA907E0EF6099406B02BD4EC1E75C4DDACA675C396F6E6E7026F38CBA0CCF7B74CBA6D3263B4BC7B1D4D348C6C7A84A7B7B31FEECF2C307132E65B37C345E7CA1D8C213E6D0AA99393BE1AF87220CD30F39A465DAF1CDF4274991BD4DC27FD09BB214B16D68B1FAD233D2ED25B559F6CB98C407CD0104F0CA2B198CE353B3869042F1C9750DCF0671A2CCB5ADFF120244B0828F86873F14C975ECCC17E8A797A6122AAE89AECE4"
        ];
        let ys: Vec<BigUint> = statement
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let proof = Proof{
            e : BigUint::from_hexa_string(
                &"0xB1EA73A8BE45C17E6416A8FB86D326C580A86FE31958D4A7F7FC76E9981CB690".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0x4BCD5712846DEDA293A5D164F945AE1FA3CA3F1D6F8521235532AE5663238BE5446CC129CC47EF25E5A34C82CAE1837D462492D488CF9966E0928A013E7E81B995A1375A0219EB8451E269DB6486CE99B180E2C91FE8F52F236993A85573808A3F51DA9519510B4AC489F8B250A886F32B87519665E7A229FCC525CA72FA8B565D546456A77F52EC9F98488A98553C56B2816C28FE4609C1DFA77FDD53E08385DA32770B659953340B6AF62900934F3BE11F7A2D313BC977DDE8BE4CEF3461135B81825296FD8E9C588A0BDB2A0BC60D88EC17E93B7A6AADCF3000F8D2877D0CF670F9042B05CE739E8D804E85C6996E9DF42AA0D866C02C5F33152133E7023CBD259CFCF85770BEDF674D7CCA334AF7D0256873CF38EF9F1C9A500A01BFEBCF1E5317D72255D1B4F24CBBF5CDFAB1F51801CA96053A08F52539DA4B2B29EC9D830295C78360E0947BF216EFA395B714644A3A7035A2D2FA2D7EFD7C5DBD54CD7A352955CE810B175D17180FE11EBC207C7B91AB46B0C40765E25AE722F0B9F2".to_string()).unwrap()
        };
        let add_info: Vec<String> = vec!["test-0".to_string(), "test-1".to_string()];
        assert!(verify_exponentiation(&eg, &gs, &ys, &proof, &add_info))
    }

    #[test]
    fn test_verify_exp_3072_7() {
        let eg = EncryptionGroup{
            p: BigUint::from_hexa_string(&"0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE67008E186D1BF275B9B241DEB64749A47DFDFB96632C3EB061B6472BBF84C26144E49C2D04C324EF10DE513D3F5114B8B5D374D93CB8879C7D52FFD72BA0AAE7277DA7BA1B4AF1488D8E836AF14865E6C37AB6876FE690B571121382AF341AFE94F77BCF06C83B8FF5675F0979074AD9A787BC5B9BD4B0C5937D3EDE4C3A79396419CD7".to_string()).unwrap(), 
            q: BigUint::from_hexa_string(&"0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B".to_string()).unwrap(), 
            g:BigUint::from_hexa_string(&"0x4".to_string()).unwrap(), 
        };
        let bases = [
            "0x
            "0x51996FCA06E00A3671C965F20BA15F965C7F41F5D2A016CAD60F782FCA80772D09A0FE6F1E56FB014830F218AFC0DA9DFEA17B91DFCBC569E7556BBD5C72E42F67B72AFFB50DCAAF2E83A64A37DED91135366055EB0245D38BCCC87851A3513968CB93CD6C3D8DE0BED1752A73051E7B69C17BB6707C45CBD5F33F722D25653FA512C2EC32566F9D5D63237A754979E315ABCC7D3DC992AAB9B472518F8E2134A581754BA60DDF8F4773CDE6DE913DC1E7F2EA750EBE5ED836369FE5C4DE495E7009BCF17EDD9292D623990C0236AF60437E0ACDB49A2FD24657B2EA1E0B9530E262CD7563DEE6AE96604A3D9AB127B04B52C7C9771C653800A4C841F7673256E1FE67944FFDBA49411D3FFDCA0C1BEC30B9E173BC1BA42ADB6B7DBBA9606E5B51B5317E01DF0876BE41C4A653FF2F6CBFBBE5A11BE83129B1F0D4835D2F63BED3C890234BF2161A9D9EE14239E16040048CD0F7A3CF47B3047756FA8E5236FF7082CB0EA1ED8B04A27B970487C3846069EC4B0485662D9389A3F4231E05316B",
            "0x10068C5812CF679CE4C0FE28E39F18EF13CD44D8A3E4D218760E6BE35AAA1F7E3F00A1E16F6428699A6B6C0EF9A889E1E5D493FDB054AB75351E9910C38C87AF37DF9A0FBCEF4916B562765A1EA7C2DDCBADBFC81CDFE6A922B987E3FA8C3C8D878C4768475586AE710DE6224732565BAC1043C96DDAF76784A9B95DF0A544744CA10F0DC68A596DD1E89412715B60A34E00FADA7F7B98EC68F2F364C7FAE9C0BE3DAB32F0C4200C7DEA64E599E0BC89BE71F22E1600974BF69865A6D9C59620108AC275A9FBD41AB6ADA59CF8C8D7ACE02241E34F269F2C27A84D83AEE49F3FB6EEFEC91C4585E42249776DC4A92C1E212A720BD3B20AD943A57B3C08A197CFD13C0872FF83BC134C78286D0153D46AFFDFBDA029903CB967E9BE2A75A31582CAF9B8BB23DF0CE0622DC948FA02839026C3EBAB800EB16FAFF9E6AAC8787066588C25DE35B877FFF8701F89B69B1CEFF97E46C1147DB87A5778B6561A93B600ADCE21734B4F9E6EA64B07F25ECB17BA84A56BE7875A183D04DA420425B36C55",
            "0x
            "0x65FC627DBA256E8FBAA214E5BFC765951F0BF70D87790CB9CCCF43B16B1DD1EF3CD9AE32F929D2DE224A708CFB987C6316E0904D39E802B0C2890DBF0EDDC7C5E1B3DEA219DFF9B6D2CCDE61738F8F8D8DEF60A6CE605AD445E69985EF52D4DDAF458CEB034A63BDB3356F96D9BE30D3C654EEC4C97B7C4EE8226C2494466A65B382A62E659E3544D2836661F00E14CB6979EEB857918993A10A81CE9180DEFE499D161B4B0A71B3D9E26290F3CED598BB5511AD8D681E1E064F344AABB300284CC6C4096EA3B8E00241FDA017451FE6542BAA07A56CD33E66DA983C627B7660D6CC270276BF4A3B205DDE5EFCCA32FCAF163678BAE87F9B32146C1DD255CD9F4A04DDD7CA7C728652EFBFCE6E921A05EB09A8E171BF1B03FFA13713DD642FACDDEA3DF2E032FB344A52600F7EC5A3FAA97A542F4CC6DE97C5F7371C7A02E6D0996376E292183785E6EE544A4AA8E1DE41694A3A25259D2122251A6D534A5608C919AB238061CE5EE778E0A9418101EED7A7C775BB02FEB0B315F76C92F670D3",
            "0xA002CC6721E036B6117DF3E5FBF14502AFEDDA1B1B61C221DF7BDFA44E3C3B9BDD82D6E2732430769237919B7BB35251BB10EEC7440DBE2DD2D2A05292C56B456D57C83F0B1E24E5C5CCA6CB2DED1EF1978BF0894ECC33FDE413FF7454634CF9C5CCEFCAA58B26E44FCBF45F039582C7752118CE5F8093575BD4E4BC5563C5FF7330BA959B6022CEA7A479FF66D41D6B4BF94C948D443FE53294A64F6530B7FE7AC919A92BDCF4786DAE7D43B3F93F9D1CA196F6D2DE2B25ECC943F0FA6BCC1723C08912628D95EEF0E8EDA19DFBBFFFE4F84676A10EB32751033BCB025C201A26C1BE4D6478A5913569C140DBC7BD596317E024FAA827939DB7E8740138661F60F0F90FFF061F6A12053769C89B805B05712F01D6137545F048EC6BD649EE0AF3098BCEAB6C958492F541F591F4BB7308D3E6D85861E1E6410C0BF175A552583471D82294D978C151C601E626C3F8303DE710322F4646DABB348247C5442C5763E04B402229702E643D01A39A769619FC5FC50EF091D4D508A1562B6D8543C8",
            "0x6D522AA61E36EC2EE8721B046E20EB146FF67094B4B998DC9887D958B09D7F8F256DE8E2D7C4094B0C2F8B1273A81CE2BE525FE0685CBD8D2232E696EE280F3C60D38B0FB6F87E68453469047725FAA0A521309B6A31CE5820C4DAE37399574605A224A6CAE44EC52B4E19C119E37ED619EB67C4F6ADD7CCBAF4A1437BCB2105E80630433FFBAA56BAC6F2DECC239081E8861851AE1A8FE6C61F638B0F27A42918036E259395665B679F198A9EA7237128CEF6A7D926F1BDE2EBEDDA19F83E979F534BE690EF4C761F008D7AB76D0BA96DA3526CDDEEA75D74A1AFBF27487723933E177D4CCAD22E62621CCA718727765658518F265F3336514286333DEBD64EA9F2480349489BE744471CE424356919D5AEBF7F77227E97254217E02731EDF46BD496C5A405049D537F84D58AFE6D77BF6EDFD157D2696C517CD97B78BCB9E42108830AF3882DA99F716C789EDFE9F41A18C05463ADB0062E4CE619323999AFC163808B759DD20B0CEEFFCC104D59E6FD6F492C87BDB6D1CA9753D22E55F64A"
        ];
        let gs: Vec<BigUint> = bases
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let statement = [
            "0xD4EC1540CA5A63316A708C9BF250DB429D8D4FB69828AEDD09684913878B24422295C5F79BAC03B3C3D3B16E66AF066B229706D7A286C9D8F6B68E93CA8C3D91FF0E7367AAB7DFCE192E763B8464E6400B1F64A04C75B2F519C8E5D8ADE02FFC24B754CE5EA3FCB96E63A8BF90F86BA4666AED0327FD61347926E2D8C7C843E09039514E5399A89384E175D443AB831573E3FA9BDE9AB0D070860B35A4BFA50AB692B60660B190E9060A3F81F81DABF20112863FB0254D3E77B6CFDB606BD74B648A37B4001D562EC62BA8AB960947FBD8DB77C17AA0E62C4A4C79673C4AED8C0EFB240A863A5598E8C53749B147917C3B11AE724BC29FEB2FE4B2A9F621E871277B47EC230970522F2AD53E5C0BDF10601653C80D77C91547D093F735055551DB9F36BC54D215097B4DAE6EE6157BF60E5E73ACD795364F4F825F291D5AD79491CEE478ECA5543B93FAB37DBBF851446916554EB0A356EB5E68744AEAF9E228AD598B1D80DCF616028D3165B0980EAD3647443C1822843DBADE9E1EF5E278",
            "0x
            "0x
            "0x71C7C3E78423C749C02E95AEACFA73C1A7E9B1C39DA578F7DE33C900ACA41E94AEBFD465AA61C1E0BDDD6181D6501FB101BD08F414103DF0F21C94093580DF6B02682B71A5F97DE1D3375C4A1929026AFE20B9A1D000A8C0A3FAB3793278B00847AB6B6742107A1408010C099AEC6B306C56CA4B661EF7816FCE8DF818C1D50E5473C53AC9824A63CFFEACF13527E73972F557A2AE4B4FB4B0006FDC3CCD9F6B67EFD8C19A217331D01AA836AE54F00D1C24724CCA6D7D37A7F663B39AB1E83E1A3CFADF4A84F695DA8BBD795E4519F843AF25235D985AAF91CC90443C9EBD0FB59E90CDA6B279825687D82A21115D01C8889992573EDA7A8878AF8609B61E43FC74E0C15F0569B6669A7FAE2376D6549AB25D5ED19EEE90D98661F93EE6290675F642A67C051355B27C7DACABC47FFFA894FBB590B20D3B9FF3A17789ACA1FE77B5254625AE794C41F0D7CCF39F1DD263230C1324A8689362FE051636DA4A3775090FF09C507A7A95BA50C13228A407E01F9E417EB732080B66E934253531CC",
            "0xAADD5A3FDA41E6AD819CD2B159C3270EFBE2EA800E1F528BD8C3AAD3D07200683E25FED9B16A07540C2E4248ECB9C897A6F3DA116ADEB7BDC3F82EE7B6FCE56026C0DA41DCCDA4562491501F991F43045A9F8536C7481C77EF36DE83B024935C53329F1053F6F5C04943727F3A4295F0DC3A4C994AD99BC56563379AE42CD799F781D3EE534F3211ECBB72530AD8A54BA2EDA76ECEBA20C6C2000C48DF8683BF5F3F76700F0997319DDD799BB779105F9DB0B161CE64700761935FC3A25037C11420029B913D4FA43120875F9168C6880526C28CA596AD9AEF90D0535588B1D1B6FD892E68D631E6E5E4933F90DDCDA8E1D0791B9D6CD8F47B27E4A1194A7FAD48F56B620E2602494A05C28649F3AD4416F32444B3396EFD197D0722FA1794621C08C80760C3A41EDD2B6A2F6A4EDD91B4DCEEEA420164A56034E0FEC4F876A078C272EA7595084B8AEFEDF5B91458FC3858DA7E733B94BEF5DF77409781B4B59FFA1274D139E655EEC6AAA2F8B7F57134FA7C9EA0C4DC861D3E617104AEECA8",
            "0x
            "0x23049B3CBF31FF70147DBF241A712C3E0BD793BE2D320DA03B36E4DB32B465D33FDF4EB3141FD185F5C46FF1F332596A33C7E5B3902D3AA4626BB09219F4C68B5799FBDD3FC4EB778E009E24275E46C190C9DDE9B9D6C9B7225E6C30970B95F2A70745113101183A387BF556A18FBE347749712F1C0989168F89AAFD5579A74106AD6D3470AADDB90AAFB9060A32EA940C8F277745FCD58AAD986D882AC1CC3CE0440BBD41DF25BB35DCF74FFF0E1472B0E296AE65311BABE7DB612A6D8FEC1531647281BA7E38010420DE292E8A23E0561A1CC77E7D44106D7BEF8257097A3B9CB57CE6080E445169C1901B9E7657D2AF3FE76C025833271C24727EEDF86ECE1C0D9A9A6FAD196F343AE2F07901C0D20B28290CD78CA67C4CDCFA708B1F4375E871CDD11AEF864481EB9F25FC535A5AFB282121A1555C175A50A9D4FE8A24F88CFBC3778B4B4BF44CF39D1046DA6034C52A31D12B9398E0B3198D1DEC093AB8B5024BEB1BEB5EE4C788295BEA483BCB144CD35853C77F17F501BA19BDFBA11E"
        ];
        let ys: Vec<BigUint> = statement
            .iter()
            .map(|e| BigUint::from_hexa_slice(e).unwrap())
            .collect();
        let proof = Proof{
            e : BigUint::from_hexa_string(
                &"0xB5706811B59D6CE68F85A5F84C87FEA0A259DADDC0EDDD2CE43ABF73AE26F0BD".to_string(),
                ).unwrap(),
            z : BigUint::from_hexa_string(&"0xto_string()).unwrap()
        };
        let add_info: Vec<String> = vec!["test-0".to_string(), "test-1".to_string()];
        assert!(verify_exponentiation(&eg, &gs, &ys, &proof, &add_info))
    }
}
